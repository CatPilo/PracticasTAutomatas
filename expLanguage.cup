/* ---------------------- Seccion de declaraciones package e imports--------------------*/

import java_cup.runtime.*;
import java.io.*;

/* ---------------------- Seccion componentes de codigo de usuario --------------------*/
parser code {:
public static void main(String args[]) throws Exception {
FileInputStream fichero=new FileInputStream(args[0]);
DataInputStream entrada =new DataInputStream(fichero);
try{
new parser(new Yylex(entrada)).parse();
}
catch ( Exception e) {
System.out.println(" Análisis INCORRECTO !!");
System.exit(1);}
System.out.println("Análisis Correcto ");
}
:}
/* ------------ Declaracion de la lista de simbolos de la gramatica ----------- */

terminal W, OLU, CM, OID, OA, OR, A, C, TD, R, PR, B, AP, CP, AL, CL, CC, FC, FS, OL, I, IF, EIF, ELS;
terminal Integer NL;

non terminal sentencia, sentencias, sentenciaReturn, declaracion, asignacion, bucleWhile, metodo, args, llamadaMetodo, parametros, parametro, bucleDoWhile, sentenciaIf, sentenciaElseIf, sentenciaElse;
non terminal Integer expr;

/* ------------- Declaracion de precedencias ----------- */

/*precedence left MAS;
precedence left POR;*/
precedence left OA;
precedence left OL;
precedence left OR;
/* -------------- Declaracion de la gramatica ----------- */
sentencias ::= sentencia sentencias | ;
sentencia ::= sentenciaReturn | asignacion | declaracion | bucleWhile | metodo
	      | llamadaMetodo FS | bucleDoWhile | sentenciaIf;
sentenciaReturn ::= R expr FS;

declaracion ::= TD I FS;
asignacion ::= I A expr FS | TD I A expr FS | OID I FS | I OID FS;
expr ::= NL
    | B
    | I
    | expr OA expr
    | expr OR expr
    | expr OL expr
    | OLU expr
    | AP expr CP
    | OID I
    | I OID
    | llamadaMetodo;
metodo ::= CM TD I AP args CP AL sentencias CL |
       	   CM TD I AP CP AL sentencias CL;
args ::= TD I C args| TD I ; 
llamadaMetodo ::= I AP parametros CP |
	      	  I AP CP;
parametros ::= parametro C parametros | parametro;
parametro ::= expr;
bucleWhile ::= W AP expr CP AL sentencias CL;
bucleDoWhile ::= PR AL sentencias CL W AP expr CP FS;

sentenciaIf ::= IF AP expr CP AL sentencias CL sentenciaElseIf;
sentenciaElseIf ::= EIF AP expr CP AL sentencias CL sentenciaElseIf
	       	   | sentenciaElse | ;
sentenciaElse ::= ELS AP expr CP AL sentencias CL;